{"version":3,"sources":["webapp/components/HutMap.tsx","common/repo/QueryBuilder.ts","common/repo/reservation-repo.ts","common/repo/hut-repo.ts","webapp/App.tsx","webapp/reportWebVitals.js","index.tsx"],"names":["HutMap","props","huts","MapContainer","center","zoom","scrollWheelZoom","style","height","TileLayer","attribution","url","map","hut","index","Marker","position","coordinates","latitude","longitude","Popup","href","id","name","QueryBuilder","constructor","data","tx","this","queue","copy","queueFilter","fn","arr","filter","queueSort","comparator","sort","allData","length","reduce","async","Promise","resolve","ReservationQueryBuilder","filterByDateRange","from","to","it","date","isSameOrAfter","isSameOrBefore","filterByMinFreeRoom","minFreeFrom","freeRoom","rejectClosed","closed","joinHuts","find","hutId","getAll","reservationsStorage","reservations","moment","transformations","filterByDate","isSame","filterByHutIds","hutIds","includes","reservationRepoFactory","HutQueryBuilder","filterByCountryCode","countryCode","filterByMaxElevation","maxElevation","elevation","filterByMinElevation","minElevation","filterByName","query","pattern","RegExp","test","joinDistanceFrom","distance","geolib","joinReservations","rejectEmptyCoordinates","sortByDistance","compareBy","sortById","sortByName","hutsStorage","getUpdatedAt","updatedAt","getById","apply","propertyName","a","b","aVal","bVal","allOf","txs","transformedReservations","transformReservationArray","reservationTx","noop","oneOf","hutRepoFactory","library","add","fas","hutRepo","reservationRepo","useStyles","makeStyles","theme","root","display","flexDirection","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","menuButton","marginRight","spacing","menuButtonHidden","title","flexGrow","drawerPaper","whiteSpace","width","enteringScreen","breakpoints","down","overflowX","drawerPaperClose","appBarSpacer","flex","content","overflow","container","paddingTop","paddingBottom","paper","fixedHeight","footer","marginTop","filterContainer","filterPaper","filterDrawer","up","flexShrink","filterDrawerClose","filterDrawerPaper","filterDrawerPaperClose","right","country","toLowerCase","App","useTheme","isMobile","useMediaQuery","classes","hutDisplayMode","setHutDisplayMode","useState","open","setOpen","React","setHuts","hutsUpdatedAt","setHutsUpdatedAt","countryCodeFilters","setCountryCodeFilters","label","hutTx","value","active","elevationFilters","setElevationFilters","reservationDateFilter","setReservationDateFilter","freeRoomFilter","setFreeRoomFilter","useEffect","allHuts","filteredHuts","transformHutArray","fetchHuts","changeHutDisplayMode","targetMode","mainRef","createRef","showSubtitle","setShowSubtitle","showFilters","setShowFilters","className","CssBaseline","AppBar","Toolbar","IconButton","edge","color","aria-label","onClick","console","log","Typography","component","variant","noWrap","Drawer","onClose","anchor","clsx","gutterBottom","Grid","item","xs","FormControl","FormLabel","FormGroup","FormControlLabel","control","Checkbox","checked","onChange","evt","TextField","target","parseInt","InputProps","endAdornment","InputAdornment","utils","MomentUtils","disableToolbar","autoOk","format","margin","openAt","updateFreeRoom","onScroll","current","scrollTop","ref","Container","maxWidth","List","ListItem","divider","ListItemText","primary","secondary","Box","pt","dateTime","toISOString","fromNow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50f1ba69.chunk.js","sourcesContent":["// import React from 'react'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { Hut } from './../../common/repo/hut-repo'\nimport { LatLngExpression } from 'leaflet'\n\n// const {\n//   useState\n// } = React\n\n// const {\n//   Dialog\n// } = require('@material-ui/core')\n\n\nconst HutMap = (props: any) => {\n  const { \n    huts,\n    // mapCenter\n  } = props\n  // const center = {\n  //   lat: mapCenter ? mapCenter.latitude : null, \n  //   lng: mapCenter ? mapCenter.longitude : null\n  // }\n\n  const position = [47.505, 12.09] as LatLngExpression\n\n  return (\n    <MapContainer center={position} zoom={7} scrollWheelZoom={true} style={{height: '100%'}}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {huts.map((hut: Hut, index: any) =>\n        <Marker\n          key={hut.id}\n          position={[hut.coordinates?.latitude, hut.coordinates?.longitude] as LatLngExpression}\n        >\n          <Popup>\n            <a href={`https://www.alpsonline.org/reservation/calendar?hut_id=${hut.id}`}>{hut.name}</a>\n          </Popup>\n        </Marker>\n      )}\n    </MapContainer>\n  )\n}\n\nexport default HutMap","export type ResultTransformation<T> = {\n  (arr: T[]) : Promise<T[]> | T[]\n}\n\nexport default abstract class QueryBuilder<T> {\n  private data: Promise<T[]> | T []\n  private tx: ResultTransformation<T>[]\n  constructor(data : Promise<T[]> | T [], tx: ResultTransformation<T>[] = []) {\n    this.data = data\n    this.tx = tx\n  }\n\n  protected queue (tx: ResultTransformation<T>): QueryBuilder<T> {\n    return this.copy(this.data, [...this.tx, tx])\n  }\n  protected queueFilter(fn: (value: T, index: number, array: T[]) => boolean): QueryBuilder<T> {\n    return this.queue(arr => arr.filter(fn))\n  }\n  protected queueSort(comparator: ((a: T, b: T) => number)): QueryBuilder<T> {\n    return this.queue(arr => arr.sort(comparator))\n  }\n\n  protected abstract copy(data: Promise<T[]> | T [], tx: ResultTransformation<T>[]): QueryBuilder<T>;\n\n  async apply (): Promise<T[]> {\n    const allData = await this.data\n    if (this.tx.length === 0) return [...allData]\n\n    const arr = await this.tx.reduce(async (arr, fn) => {\n      const newArr = await arr\n      return fn(newArr)\n    }, Promise.resolve(allData))\n    return arr\n  }\n\n}","import { ArrayTransformation } from '../util/transformable-array'\nimport reservationsStorage from '../../webapp/reservations.json'\nimport QueryBuilder from './QueryBuilder'\nimport { HutId, Hut } from './hut-repo'\nimport moment from 'moment'\n\nexport interface Reservation {\n  hutId: HutId\n  date: moment.Moment\n  bookingEnabled: boolean\n  closed: boolean\n  freeRoom: number\n}\n\nexport interface WithHut {\n  hut: Hut\n}\n\nexport type ReservationWithHut = Reservation & WithHut\n\nexport type ReservationArrayTransformation = ArrayTransformation<Reservation>\n\nexport class ReservationQueryBuilder extends QueryBuilder<Reservation> {\n  protected copy(data: Reservation[] | Promise<Reservation[]>, tx: ArrayTransformation<Reservation>[]): ReservationQueryBuilder {\n    return new ReservationQueryBuilder(data, tx)\n  }\n\n  filterByDateRange (from: moment.Moment, to: moment.Moment): ReservationQueryBuilder {\n    return this.queueFilter(it => it.date.isSameOrAfter(from) && it.date.isSameOrBefore(to)) as ReservationQueryBuilder\n  }\n  filterByMinFreeRoom (minFreeFrom: number): ReservationQueryBuilder {\n    return this.queueFilter(it => it.freeRoom >= minFreeFrom) as ReservationQueryBuilder\n  }\n  rejectClosed (): ReservationQueryBuilder {\n    return this.queueFilter(it => it.closed !== true) as ReservationQueryBuilder\n  }\n  joinHuts (huts: Hut[]): ReservationQueryBuilder {\n    return this.queue(arr => arr.map(it => {\n      const copy = { ...it } as ReservationWithHut\n      // @ts-ignore\n      copy.hut = huts.find(({ id }) => it.hutId === id)\n      return copy\n    }).filter(it => !!it.hut)) as ReservationQueryBuilder\n  }\n}\n\n\n\n// const getAll = async (): Promise<TransformableArray<Hut>> => {\n//   return TransformableArray.from([...hutsStorage.huts])\n// }\nconst getAll = (): ReservationQueryBuilder => {\n  // @ts-ignore\n  return new ReservationQueryBuilder(reservationsStorage.reservations\n    .map(it => {\n      // @ts-ignore\n      it.date = moment(it.date)\n      return it\n    }))\n}\n\n// const getById = async (id: HutId): Promise<Hut|null> => {\n//   const allHuts = await getAll().apply()\n//   const hut = allHuts.find(it => it.id === id)\n//   return hut ?? null\n// }\n\n// const compareBy = (propertyName: string) => (a: any, b: any) => {\n//   const aVal = a[propertyName], bVal = b[propertyName]\n//   if (aVal < bVal) return -1\n//   else if (aVal > bVal) return 1\n//   else return 0\n// }\n\nexport const transformReservationArray = async (reservations: Reservation[], transformations: ReservationArrayTransformation[]): Promise<Reservation[]> => {\n  const transformed = await transformations.reduce(async (arr, fn) => {\n      const newArr = await arr\n      return fn(newArr)\n    }, Promise.resolve(reservations))\n  return transformed\n}\n\nexport const transformations = {\n  filterByDate: (date: moment.Moment): ReservationArrayTransformation => arr => {\n    return arr.filter(it => it.date.isSame(date, 'day'))\n  },\n  filterByDateRange: (from: moment.Moment, to: moment.Moment): ReservationArrayTransformation => arr => {\n    return arr.filter(it => it.date.isSameOrAfter(from) && it.date.isSameOrBefore(to))\n  },\n  filterByHutIds: (hutIds: HutId[]): ReservationArrayTransformation => arr => {\n    return arr.filter(it => hutIds.includes(it.hutId))\n  },\n  filterByMinFreeRoom: (minFreeFrom: number): ReservationArrayTransformation => arr => {\n    return arr.filter(it => it.freeRoom >= minFreeFrom)\n  },\n  rejectClosed: (): ReservationArrayTransformation => arr => {\n    return arr.filter(it => it.closed === true)\n  }\n}\n\nconst reservationRepoFactory = () => {\n  return {\n    getAll,\n    // getById,\n    tx: {\n      // filterByCountryCode: (countryCode: CountryCode): ReservationArrayTransformation => arr => {\n      //   return arr.filter(it => it.countryCode === countryCode)\n      // },\n      // filterByMaxElevation: (maxElevation: number): ReservationArrayTransformation => arr => {\n      //   return arr.filter(hut => hut.elevation && hut.elevation <= maxElevation)\n      // },\n      // filterByMinElevation: (minElevation: number): ReservationArrayTransformation => arr => {\n      //   return arr.filter(hut => hut.elevation && hut.elevation >= minElevation)\n      // },\n      // filterByName: (query: string): ReservationArrayTransformation => arr => {\n      //   const pattern = new RegExp(query, 'gi')\n      //   return arr.filter(hut => pattern.test(hut.name))\n      // },\n      // sortById: (): ReservationArrayTransformation => arr => {\n      //   const comparator = compareBy('id')\n      //   return arr.sort(comparator)\n      // },\n      // sortByName: (): ReservationArrayTransformation => arr => {\n      //   const comparator = compareBy('name')\n      //   return arr.sort(comparator)\n      // }\n    }\n  }\n}\n\nexport default reservationRepoFactory","import { ArrayTransformation } from './../util/transformable-array'\nimport hutsStorage from './../../webapp/huts.json'\nimport QueryBuilder from './QueryBuilder'\nimport * as geolib from 'geolib'\nimport { Reservation, transformReservationArray, transformations as reservationTx, ReservationArrayTransformation } from './reservation-repo'\nimport * as async from 'async'\nimport moment from 'moment'\n\nexport type HutId = number\nexport type CountryCode = string\nexport interface Hut {\n  id: HutId,\n  name: string\n  countryCode: CountryCode\n  elevation?: number\n  coordinates?: {\n    latitude: number\n    longitude: number\n  }\n}\nexport interface HutWithCoordinates extends Hut {\n  coordinates: {\n    latitude: number\n    longitude: number\n  }\n}\n\n// export type ResultTransformation<T> = {\n//   (arr: T[]) : Promise<T[]> | T[]\n// }\n\nexport interface WithCoordinates {\n  coordinates?: {\n    latitude: number\n    longitude: number\n  }\n}\nexport interface WithDistance {\n  distance: number\n}\nexport type HutWithDistance = Hut & WithDistance\n\nexport interface WithReservations {\n  reservations: Reservation[]\n}\nexport type HutWithReservations = Hut & WithReservations\n\ntype HutArrayTransformation = ArrayTransformation<Hut>\n// type HutResultTransformation = ResultTransformation<Hut>\n\nexport class HutQueryBuilder extends QueryBuilder<Hut> {\n  protected copy(data: Hut[] | Promise<Hut[]>, tx: ArrayTransformation<Hut>[]): HutQueryBuilder {\n    return new HutQueryBuilder(data, tx)\n  }\n  filterByCountryCode (countryCode: CountryCode): HutQueryBuilder {\n    return this.queueFilter(hut => hut.countryCode === countryCode) as HutQueryBuilder\n  }\n  filterByMaxElevation (maxElevation: number): HutQueryBuilder {\n    return this.queueFilter(hut => !!hut.elevation && hut.elevation <= maxElevation) as HutQueryBuilder\n  }\n  filterByMinElevation (minElevation: number): HutQueryBuilder {\n    return this.queueFilter(hut => !!hut.elevation && hut.elevation >= minElevation) as HutQueryBuilder\n  }\n  filterByName (query: string): HutQueryBuilder {\n    const pattern = new RegExp(query, 'gi')\n    return this.queueFilter(hut => pattern.test(hut.name)) as HutQueryBuilder\n  }\n  joinDistanceFrom ({ latitude, longitude}: { latitude: number, longitude: number}): HutQueryBuilder {\n    return this.queue(arr => arr.map(hut => {\n      if (hut.coordinates) {\n        const copy = { ...hut } as HutWithDistance\n        copy.distance = geolib.getDistance({ latitude, longitude}, hut.coordinates) / 1000\n        return copy\n      } else {\n        return hut\n      }\n    })) as HutQueryBuilder\n  }\n  joinReservations (reservations: Reservation[]): HutQueryBuilder {\n    return this.queue(arr => arr.map(it => {\n      const copy = { ...it } as HutWithReservations\n      // @ts-ignore\n      copy.reservations = reservations.filter(({ hutId }) => it.id === hutId)\n      return copy\n    }).filter(it => it.reservations.length > 0)) as HutQueryBuilder\n  }\n  rejectEmptyCoordinates (): HutQueryBuilder {\n    return this.queueFilter(hut => !!hut.coordinates) as HutQueryBuilder\n  }\n  sortByDistance (): HutQueryBuilder {\n    return this.queueSort(compareBy('distance')) as HutQueryBuilder\n  }\n  sortById (): HutQueryBuilder {\n    return this.queueSort(compareBy('id')) as HutQueryBuilder\n  }\n  sortByName (): HutQueryBuilder {\n    return this.queueSort(compareBy('name')) as HutQueryBuilder\n  }\n}\n\n\n\n// const getAll = async (): Promise<TransformableArray<Hut>> => {\n//   return TransformableArray.from([...hutsStorage.huts])\n// }\nconst getAll = (): HutQueryBuilder => {\n  return new HutQueryBuilder([...hutsStorage.huts])\n  // return TransformableArray.from([...hutsStorage.huts])\n}\n\nconst getUpdatedAt = (): moment.Moment => {\n  return moment(hutsStorage.updatedAt)\n}\n\nconst getById = async (id: HutId): Promise<Hut|null> => {\n  const allHuts = await getAll().apply()\n  const hut = allHuts.find(it => it.id === id)\n  return hut ?? null\n}\n\nconst compareBy = (propertyName: string) => (a: any, b: any) => {\n  const aVal = a[propertyName], bVal = b[propertyName]\n  if (aVal < bVal) return -1\n  else if (aVal > bVal) return 1\n  else return 0\n}\n\n// abstract class Collection<T> {\n//   private data: Promise<T[]> | T []\n//   private tx: ArrayTransformation<T>[]\n//   constructor(data : Promise<T[]> | T [], tx: ArrayTransformation<T>[] = []) {\n//     this.data = data\n//     this.tx = tx\n//   }\n\n//   protected queue (tx: ArrayTransformation<T>): Collection<T> {\n//     return this.copy(this.data, [...this.tx, tx])\n//   }\n//   protected queueFilter(fn: (value: T, index: number, array: T[]) => boolean): Collection<T> {\n//     return this.queue(arr => arr.filter(fn))\n//   }\n//   protected queueSort(comparator: ((a: T, b: T) => number)): Collection<T> {\n//     return this.queue(arr => arr.sort(comparator))\n//   }\n\n//   protected abstract copy(data: Promise<T[]> | T [], tx: ArrayTransformation<T>[]): Collection<T>;\n\n//   async apply (): Promise<T[]> {\n//     const allData = await this.data\n//     if (this.tx.length === 0) return [...allData]\n\n//     const arr = await this.tx.reduce(async (arr, fn) => {\n//       const newArr = await arr\n//       return fn(newArr)\n//     }, Promise.resolve(allData))\n//     return arr\n//   }\n\n// }\n\n// export class HutCollection extends Collection<Hut> {\n//   protected copy(data: Hut[] | Promise<Hut[]>, tx: ArrayTransformation<Hut>[]): HutCollection {\n//     return new HutCollection(data, tx)\n//   }\n\n//   filterByCountryCode (countryCode: CountryCode): HutCollection {\n//     return this.queueFilter(hut => hut.countryCode === countryCode) as HutCollection\n//   }\n//   filterByMaxElevation (maxElevation: number): HutCollection {\n//     return this.queueFilter(hut => !!hut.elevation && hut.elevation <= maxElevation) as HutCollection\n//   }\n//   filterByMinElevation (minElevation: number): HutCollection {\n//     return this.queueFilter(hut => !!hut.elevation && hut.elevation >= minElevation) as HutCollection\n//   }\n//   filterByName (query: string): HutCollection {\n//     const pattern = new RegExp(query, 'gi')\n//     return this.queueFilter(hut => pattern.test(hut.name)) as HutCollection\n//   }\n//   joinDistanceFrom ({ latitude, longitude}: { latitude: number, longitude: number}): HutCollection {\n//     return this.queue(arr => arr.map(hut => {\n//       if (hut.coordinates) {\n//         const copy = { ...hut } as HutWithDistance\n//         copy.distance = geolib.getDistance({ latitude, longitude}, hut.coordinates) / 1000\n//         return copy\n//       } else {\n//         return hut\n//       }\n//     })) as HutCollection\n//   }\n//   sortByDistance (): HutCollection {\n//     return this.queueSort(compareBy('distance')) as HutCollection\n//   }\n//   sortById (): HutCollection {\n//     return this.queueSort(compareBy('id')) as HutCollection\n//   }\n//   sortByName (): HutCollection {\n//     return this.queueSort(compareBy('name')) as HutCollection\n//   }\n// }\n\n// export interface HutRepo {\n//   getAll: () => { (): HutQueryBuilder }\n//   getById: any\n// }\n\nexport const transformHutArray = async (huts: Hut[], transformations: HutArrayTransformation[]): Promise<Hut[]> => {\n  const transformedHuts = await transformations.reduce(async (arr, fn) => {\n      const newArr = await arr\n      return fn(newArr)\n    }, Promise.resolve(huts))\n    return transformedHuts\n}\n\nexport const transformations = {\n  allOf: (...txs: HutArrayTransformation[]): HutArrayTransformation => arr => {\n    if (txs.length === 0) return arr\n    return async.filter(arr, async hut => {\n      return await async.every(txs, async tx => {\n        return (await tx([hut])).length === 1\n      })\n    })\n  },\n  filterByCountryCode: (countryCode: CountryCode): HutArrayTransformation => arr => {\n    return arr.filter(it => it.countryCode === countryCode)\n  },\n  filterByMaxElevation: (maxElevation: number): HutArrayTransformation => arr => {\n    return arr.filter(hut => hut.elevation && hut.elevation <= maxElevation)\n  },\n  filterByMinElevation: (minElevation: number): HutArrayTransformation => arr => {\n    return arr.filter(hut => hut.elevation && hut.elevation >= minElevation)\n  },\n  joinReservations: (reservations: Reservation[], txs: ReservationArrayTransformation[] = []): HutArrayTransformation => async arr => {\n    const hutIds = arr.map(it => it.id)\n    const transformedReservations = await transformReservationArray(reservations, [\n      reservationTx.filterByHutIds(hutIds),\n      ...txs\n    ])\n    return arr.map(it => {\n      const copy = { ...it } as HutWithReservations\n      copy.reservations = transformedReservations.filter(({ hutId }) => hutId === it.id)\n      return copy\n    }).filter(it => it.reservations.length > 0)\n  },\n  noop: (): HutArrayTransformation => arr => arr,\n  oneOf: (...txs: HutArrayTransformation[]): HutArrayTransformation => arr => {\n    if (txs.length === 0) return arr\n    return async.filter(arr, async hut => {\n      return await async.some(txs, async tx => {\n        return (await tx([hut])).length === 1\n      })\n    })\n  },\n  rejectEmptyCoordinates: (): HutArrayTransformation => arr => {\n    return arr.filter(it => !!it.coordinates)\n  }\n  // or: function() { return arr => arr.filter(hut => Array.from(arguments).some(predicate => predicate([hut]).length === 1)) },\n}\n\nconst hutRepoFactory = () => {\n  return {\n    getAll,\n    getUpdatedAt,\n    getById,\n    tx: {\n      filterByCountryCode: (countryCode: CountryCode): HutArrayTransformation => arr => {\n        return arr.filter(it => it.countryCode === countryCode)\n      },\n      filterByMaxElevation: (maxElevation: number): HutArrayTransformation => arr => {\n        return arr.filter(hut => hut.elevation && hut.elevation <= maxElevation)\n      },\n      filterByMinElevation: (minElevation: number): HutArrayTransformation => arr => {\n        return arr.filter(hut => hut.elevation && hut.elevation >= minElevation)\n      },\n      filterByName: (query: string): HutArrayTransformation => arr => {\n        const pattern = new RegExp(query, 'gi')\n        return arr.filter(hut => pattern.test(hut.name))\n      },\n      sortById: (): HutArrayTransformation => arr => {\n        const comparator = compareBy('id')\n        return arr.sort(comparator)\n      },\n      sortByName: (): HutArrayTransformation => arr => {\n        const comparator = compareBy('name')\n        return arr.sort(comparator)\n      }\n    }\n  }\n}\n\nexport default hutRepoFactory","// import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useState, useEffect } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\n// import Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\n// import Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n// import Paper from '@material-ui/core/Paper';\n// import Link from '@material-ui/core/Link';\n// import Icon from '@material-ui/core/Icon';\nimport MenuIcon from '@material-ui/icons/Menu';\n// import RestoreIcon from '@material-ui/icons/Restore';\n// import ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\n// import NotificationsIcon from '@material-ui/icons/Notifications';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport MapIcon from '@material-ui/icons/Map';\nimport ListIcon from '@material-ui/icons/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n// import ListItemIcon from '@material-ui/core/ListItemIcon';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n// import Modal from '@material-ui/core/Modal';\n// import Fade from '@material-ui/core/Fade';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n// import TabbedHutList from './components/TabbedHutList'\nimport HutMap from './components/HutMap'\nimport moment from 'moment'\n// import BottomNavigation from '@material-ui/core/BottomNavigation';\n// import BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\n\nimport MomentUtils from '@date-io/moment';\nimport {\n  MuiPickersUtilsProvider, KeyboardDatePicker\n} from '@material-ui/pickers'\n\n\n// import HutMap from './components/HutMap'\n// import HutTable from './components/HutTable'\nimport hutRepoFactory, { /*HutQueryBuilder, HutWithDistance,*/ Hut, transformHutArray, transformations as hutTx } from './../common/repo/hut-repo'\nimport reservationRepoFactory, { transformations as reservationTx } from './../common/repo/reservation-repo'\n\n// FA\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\n// import { far } from '@fortawesome/free-regular-svg-icons'\n// import {\n//   IconLookup,\n//   // IconDefinition,\n//   // findIconDefinition\n// } from '@fortawesome/fontawesome-svg-core'\n// import {\n//   FontAwesomeIcon\n// } from '@fortawesome/react-fontawesome'\n\nlibrary.add(fas)\n// const coffeeLookup: IconLookup = { prefix: 'fas', iconName: 'house' }\n// const coffeeIconDefinition: IconDefinition = findIconDefinition(coffeeLookup)\n\nconst hutRepo = hutRepoFactory()\nconst reservationRepo = reservationRepoFactory()\n\nconst drawerWidth = 240\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    height: '100vh',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  // appBarShift: {\n  //   marginLeft: drawerWidth,\n  //   width: `calc(100% - ${drawerWidth}px)`,\n  //   transition: theme.transitions.create(['width', 'margin'], {\n  //     easing: theme.transitions.easing.sharp,\n  //     duration: theme.transitions.duration.enteringScreen,\n  //   }),\n  // },\n  menuButton: {\n    marginRight: theme.spacing(1),\n    // [theme.breakpoints.up('sm')]: {\n    //   display: 'none'\n    // }\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    [theme.breakpoints.down('sm')]: {\n      overflowX: 'hidden',\n      width: 0\n    }\n  },\n  drawerPaperClose: {\n    [theme.breakpoints.down('sm')]: {\n      overflowX: 'hidden',\n      width: '70vw',\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      })\n    }\n  },\n  appBarSpacer: {\n    ...theme.mixins.toolbar,\n    flex: '0 1 56px'\n  },\n  content: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    // height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    flex: '1 1 auto',\n    overflow: 'auto',\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 340,\n  },\n  footer: {\n    marginTop: 'auto',\n  },\n  filterContainer: {\n    height: '100vh',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  filterPaper: {\n    height: '95%',\n    width: '100%'\n  },\n  filterDrawer: {\n    [theme.breakpoints.up('sm')]: {\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      width: '300px',\n      flexShrink: 0,\n    }\n  },\n  filterDrawerClose: {\n    [theme.breakpoints.up('sm')]: {\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: 0\n    }\n  },\n  filterDrawerPaper: {\n    [theme.breakpoints.down('sm')]: {\n      width: '85%'\n    },\n    [theme.breakpoints.up('sm')]: {\n      transition: theme.transitions.create('right', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      width: '300px'\n    }\n  },\n  filterDrawerPaperClose: {\n    [theme.breakpoints.up('sm')]: {\n      transition: theme.transitions.create('right', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      overflowX: 'hidden',\n      right: '-300px'\n    }\n  }\n}))\n\nconst country = (hut: any) => {\n  const countryCode = hut.countryCode.toLowerCase()\n  if (countryCode === 'de') return '🇩🇪'\n  if (countryCode === 'ch') return '🇨🇭'\n  if (countryCode === 'at') return '🇦🇹'\n  if (countryCode === 'si') return '🇸🇰'\n  return 'n/a'\n}\n\ntype HutDisplayMode = 'list' | 'map'\n\nfunction App() {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'))\n  // const matchesMediaQuery = useMediaQuery(theme.breakpoints.down('sm'));\n  // console.log('matchesMediaQuery', matchesMediaQuery)\n  const classes = useStyles()\n  const [ hutDisplayMode, setHutDisplayMode ] = useState<HutDisplayMode>('list')\n  const [open, setOpen] = React.useState(true)\n  const handleDrawerOpen = () => {\n    console.log('setting open to', !open)\n    setOpen(!open);\n  };\n  // const handleDrawerClose = () => {\n  //   setOpen(false);\n  // };\n  // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  const [ huts, setHuts ] = useState<Hut[]>([])\n  const [ hutsUpdatedAt, setHutsUpdatedAt ] = useState(moment())\n\n  const [ countryCodeFilters, setCountryCodeFilters ] = useState([\n    { label: '🇩🇪 DE', tx: hutTx.filterByCountryCode, value: 'DE', active: false }, \n    { label: '🇨🇭 CH', tx: hutTx.filterByCountryCode, value: 'CH', active: false }, \n    { label: '🇦🇹 AT', tx: hutTx.filterByCountryCode, value: 'AT', active: false }, \n  ])\n\n  const [ elevationFilters, setElevationFilters ] = useState([\n    { label: 'Min. elevation', tx: hutTx.filterByMinElevation, value: null, active: false },\n    { label: 'Max. elevation', tx: hutTx.filterByMaxElevation, value: null, active: false }\n  ])\n\n  const [ reservationDateFilter, setReservationDateFilter ] = useState(\n    { label: 'Reservation Date', tx: reservationTx.filterByDateRange, value: null, active: false }\n  )\n  const [ freeRoomFilter, setFreeRoomFilter ] = useState(\n    { label: 'Number of people', tx: reservationTx.filterByMinFreeRoom, value: null, active: false }\n  )\n\n  // const [ transformations, setTransformations ] = useState([\n  //   { label: '🇩🇪 DE', group: 'countryCode', active: false, tx: hutTx.filterByCountryCode('DE'), value: 'DE' },\n  //   { label: '🇨🇭 CH', group: 'countryCode', active: false, tx: hutTx.filterByCountryCode('CH'), value: 'CH' },\n  //   { label: '🇦🇹 AT', group: 'countryCode', active: false, tx: hutTx.filterByCountryCode('AT'), value: 'AT' },\n  //   { label: 'Min. Elevation', tx: hutTx.noop(), txFromInput: hutTx.filterByMinElevation, group: 'elevation', combinable: true, active: false, value: null },\n  //   { label: 'Max. Elevation', tx: hutTx.noop(), txFromInput: hutTx.filterByMaxElevation, group: 'elevation', combinable: true, active: false, value: null },\n  //   { label: 'Reservation Date', tx: hutTx.noop(), txFromInput: hutTx.filterByMaxElevation, group: 'availability', active: false, value: null },\n  //   { label: 'Free Room', tx: hutTx.noop(), txFromInput: hutTx.filterByMaxElevation, group: 'availability', active: false, value: null },\n  // ])\n  \n  useEffect(() => {\n    const fetchHuts = async () => {\n      setHutsUpdatedAt(hutRepo.getUpdatedAt())\n      const allHuts = await hutRepo.getAll().apply()\n      // const filteredHuts = await transformHutArray(allHuts, transformations\n      //     .filter(it => it.active === true)\n      //     .map(it => it.tx))\n      const filteredHuts = await transformHutArray(allHuts, [\n        hutTx.rejectEmptyCoordinates(),\n        hutTx.oneOf(...countryCodeFilters\n          .filter(it => it.active === true)\n          .map(it => it.tx(it.value))),\n        hutTx.allOf(...elevationFilters\n          .filter(it => it.active === true)\n          .map(it => it.tx((it.value as unknown) as number))),\n        ...(reservationDateFilter.value !== null && freeRoomFilter.value !== null\n          ? [hutTx.joinReservations(await reservationRepo.getAll().apply(), [\n              reservationTx.rejectClosed(),\n              reservationTx.filterByDate((reservationDateFilter.value as unknown) as any),\n              reservationTx.filterByMinFreeRoom((freeRoomFilter.value as unknown) as number)\n            ])]\n          : [])\n      ])\n      setHuts(filteredHuts)\n    }\n    fetchHuts()\n  }, [ countryCodeFilters, elevationFilters, reservationDateFilter, freeRoomFilter ])\n\n  const toggleCountryCode = (item: any) => {\n    return (evt: any) => {\n      setCountryCodeFilters(countryCodeFilters.map(it => {\n        if (it.label === item.label) {\n          it.active = !it.active\n        }\n        return it\n      }))\n    }\n  }\n\n  const updateElevation = (item: any) => {\n    return (evt: any) => {\n      const value = evt.target.value\n      if (!!value) {\n        setElevationFilters(elevationFilters.map(it => {\n          if (it.label === item.label) {\n            // @ts-ignore\n            it.value = parseInt(value)\n            it.active = true\n          }\n          return it\n        }))\n      } else {\n        setElevationFilters(elevationFilters.map(it => {\n          if (it.label === item.label) {\n            item.value = null\n            it.active = false\n          }\n          return it\n        }))\n      }\n    }\n  }\n  const updateFreeRoom = (item: any) => {\n    return (evt: any) => {\n      const value = evt.target.value\n      if (!!value) item.value = parseInt(value)\n      else item.value = null\n      setFreeRoomFilter({ ...item })\n    }\n  }\n\n  const handleOpen = (item: any) => {\n    return (openAt: any) => {\n      item.value = openAt\n      setReservationDateFilter({ ...item })\n    }\n  }\n\n  const changeHutDisplayMode = (targetMode: HutDisplayMode) => {\n    return () => setHutDisplayMode(targetMode)\n  }\n\n  const mainRef: any = React.createRef()\n  const [ showSubtitle, setShowSubtitle ] = useState(false) \n  const onMainScroll = () => {\n    if (mainRef.current.scrollTop > 60 && !showSubtitle) {\n      setShowSubtitle(true)\n    } else if (mainRef.current.scrollTop <= 60 && showSubtitle) {\n      setShowSubtitle(false)\n    }\n  }\n\n  const [ showFilters, setShowFilters ] = useState(false)\n  const handleFilterButtonClick = () => {\n    setShowFilters(!showFilters)\n  }\n  const handleFilterDrawerClose = () => {\n    setShowFilters(false)\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      {/* <Modal open={false}>\n        <Fade in={showFilters}>\n          <Container maxWidth=\"md\" className={classes.filterContainer}>\n            <Paper className={clsx(classes.paper, classes.filterPaper)}>\n              \n            </Paper>\n          </Container>\n        </Fade>\n      </Modal> */}\n      <AppBar position=\"absolute\" className={classes.appBar}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            // className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Open Alpine Data {showSubtitle ? `- Huts (${huts.length})` : ''}\n          </Typography>\n          <IconButton onClick={handleFilterButtonClick} color=\"inherit\">\n            <FilterListIcon />\n          </IconButton>\n          {hutDisplayMode === 'list'\n            ? <IconButton onClick={changeHutDisplayMode('map')} color=\"inherit\">\n                <MapIcon />\n              </IconButton>\n            : <IconButton onClick={changeHutDisplayMode('list')} color=\"inherit\">\n                <ListIcon />\n              </IconButton>\n          }\n        </Toolbar>\n      </AppBar>\n      <Drawer \n        open={showFilters} \n        onClose={handleFilterDrawerClose} \n        anchor=\"right\"\n        variant={isMobile ? 'temporary' : 'permanent'}\n        className={clsx(classes.filterDrawer, !showFilters && classes.filterDrawerClose)}\n        classes={{\n          paper: clsx(classes.paper, classes.filterDrawerPaper, !showFilters && classes.filterDrawerPaperClose),\n        }}\n      >\n        <div className={!isMobile ? classes.appBarSpacer : ''} />\n        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n          Filter\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\">Countries</FormLabel>\n              <FormGroup>\n              {countryCodeFilters.map(it =>\n                <FormControlLabel\n                  control={<Checkbox checked={it.active} name={it.label} onChange={toggleCountryCode(it)} />}\n                  key={it.label}\n                  label={it.label}\n                />\n              )}\n              </FormGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\">Elevation</FormLabel>\n              <FormGroup>\n              {elevationFilters.map(it =>\n                <TextField\n                  key={it.label}\n                  label={it.label}\n                  onChange={updateElevation(it)}\n                  value={it.value ? it.value : ''}\n                  InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">m</InputAdornment>,\n                  }}\n                />\n                )}\n              </FormGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\">Availability</FormLabel>\n              <FormGroup>\n              <MuiPickersUtilsProvider utils={MomentUtils}>\n                <KeyboardDatePicker\n                  disableToolbar\n                  autoOk={true}\n                  variant=\"inline\"\n                  format=\"DD.MM.YYYY\"\n                  margin=\"normal\"\n                  label=\"Date\"\n                  value={reservationDateFilter.value}\n                  onChange={handleOpen(reservationDateFilter)}\n                  // KeyboardButtonProps={{\n                  //   'aria-label': 'change date',\n                  // }}\n                />\n              </MuiPickersUtilsProvider>\n              <TextField\n                id={freeRoomFilter.label}\n                label={freeRoomFilter.label}\n                value={freeRoomFilter.value ? freeRoomFilter.value : ''}\n                onChange={updateFreeRoom(freeRoomFilter)} />\n              </FormGroup>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Drawer>\n      <main className={classes.content} onScroll={onMainScroll} ref={mainRef}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth={hutDisplayMode === 'list' ? 'md' : 'xl'} className={classes.container}>\n          <Typography component=\"h2\" variant=\"h5\" color=\"primary\" gutterBottom>\n            Huts ({huts.length})\n          </Typography>\n          {hutDisplayMode === 'list'\n            ? <List>\n                <div>\n                {huts.map((hut: any) =>\n                <ListItem key={hut.id} divider={true}>\n                  <ListItemText primary={hut.name} secondary={`${country(hut)} ${hut.elevation} m`} />\n                  {/* <ListItemText>Hello List ITem</ListItemText>\n                  <ListItemText>Hello List ITem</ListItemText> */}\n                </ListItem>\n                )}\n                </div>\n              </List>\n            : <div style={{ display: 'flex', flex: '1 1 auto' }}>\n                <div style={{ flexGrow: 1 }}>\n                  <HutMap huts={huts} />\n                </div>\n              </div>\n          }\n          <Box pt={4}>\n            Data last updated <time dateTime={hutsUpdatedAt.toISOString()} title={hutsUpdatedAt.format()}>{hutsUpdatedAt.fromNow()}</time>\n          </Box>\n        </Container>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './webapp/index.css';\nimport App from './webapp/App';\nimport reportWebVitals from './webapp/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}